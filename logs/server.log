
> rest-express@1.0.0 dev
> NODE_ENV=development tsx server/index.ts

[dotenv@17.2.1] injecting env (0) from .env -- tip: ⚙️  override existing env vars with { override: true }
8:03:59 AM [express] serving on port 5000
Received enquiry data: {
  customerId: '2a66d91a-9c30-4323-a87f-421728f64fda',
  source: 'Web Form',
  targetDeliveryDate: '2025-12-31',
  notes: 'Test with date fix'
}
insertEnquirySchema shape: {
  customerId: ZodString {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: { checks: [Array], typeName: 'ZodString', coerce: false },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  enquiryDate: ZodOptional {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      innerType: [ZodNullable],
      typeName: 'ZodOptional',
      errorMap: [Function: customMap],
      description: undefined
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  status: ZodOptional {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      innerType: [ZodNullable],
      typeName: 'ZodOptional',
      errorMap: [Function: customMap],
      description: undefined
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  source: ZodEnum {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: { values: [Array], typeName: 'ZodEnum' },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  targetDeliveryDate: ZodOptional {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      innerType: [ZodString],
      typeName: 'ZodOptional',
      errorMap: [Function: customMap],
      description: undefined
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  notes: ZodOptional {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      innerType: [ZodNullable],
      typeName: 'ZodOptional',
      errorMap: [Function: customMap],
      description: undefined
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  attachments: ZodOptional {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      innerType: [ZodNullable],
      typeName: 'ZodOptional',
      errorMap: [Function: customMap],
      description: undefined
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  createdBy: ZodOptional {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      innerType: [ZodNullable],
      typeName: 'ZodOptional',
      errorMap: [Function: customMap],
      description: undefined
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  }
}
8:04:12 AM [express] POST /api/enquiries 201 in 1431ms :: {"id":"0ba4b19c-1a30-423c-b4c6-69fe9fdd878…
Received enquiry data: {
  customerId: '2a66d91a-9c30-4323-a87f-421728f64fda',
  source: 'Web Form',
  targetDeliveryDate: '2025-12-31',
  notes: 'Test with date fix'
}
insertEnquirySchema shape: {
  customerId: ZodString {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: { checks: [Array], typeName: 'ZodString', coerce: false },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  enquiryDate: ZodOptional {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      innerType: [ZodNullable],
      typeName: 'ZodOptional',
      errorMap: [Function: customMap],
      description: undefined
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  status: ZodOptional {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      innerType: [ZodNullable],
      typeName: 'ZodOptional',
      errorMap: [Function: customMap],
      description: undefined
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  source: ZodEnum {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: { values: [Array], typeName: 'ZodEnum' },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] },
    _cache: Set(4) { 'Email', 'Phone', 'Web Form', 'Walk-in' }
  },
  targetDeliveryDate: ZodOptional {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      innerType: [ZodString],
      typeName: 'ZodOptional',
      errorMap: [Function: customMap],
      description: undefined
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  notes: ZodOptional {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      innerType: [ZodNullable],
      typeName: 'ZodOptional',
      errorMap: [Function: customMap],
      description: undefined
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  attachments: ZodOptional {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      innerType: [ZodNullable],
      typeName: 'ZodOptional',
      errorMap: [Function: customMap],
      description: undefined
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  createdBy: ZodOptional {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      innerType: [ZodNullable],
      typeName: 'ZodOptional',
      errorMap: [Function: customMap],
      description: undefined
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  }
}
8:04:51 AM [express] POST /api/enquiries 201 in 1400ms :: {"id":"db591e9b-604f-4d83-a572-ae2af7c42ec…
Browserslist: browsers data (caniuse-lite) is 11 months old. Please run:
  npx update-browserslist-db@latest
  Why you should do it regularly: https://github.com/browserslist/update-db#readme
8:06:44 AM [express] GET /api/sales-orders 304 in 1016ms :: [{"id":"e788a827-0534-45cd-9e9f-fef27228…
8:06:44 AM [express] GET /api/enquiries 200 in 1032ms :: [{"id":"e281e002-cfc1-49ec-8c68-c3e7f819d66…
8:06:45 AM [express] GET /api/dashboard/stats 200 in 1616ms :: {"activeEnquiries":5,"pendingQuotes":…
8:06:51 AM [express] GET /api/customers 304 in 228ms :: [{"id":"2a66d91a-9c30-4323-a87f-421728f64fda…
8:07:27 AM [express] GET /api/sales-orders 304 in 985ms :: [{"id":"e788a827-0534-45cd-9e9f-fef272280…
8:07:43 AM [express] GET /api/customers 304 in 985ms :: [{"id":"2a66d91a-9c30-4323-a87f-421728f64fda…
8:07:43 AM [express] GET /api/enquiries 304 in 984ms :: [{"id":"e281e002-cfc1-49ec-8c68-c3e7f819d66a…
Received enquiry data: {
  customerId: 'cea748a4-0c52-42e7-9e8a-beea3f861b86',
  source: 'Web Form',
  targetDeliveryDate: '2025-09-30',
  notes: 'Gc'
}
insertEnquirySchema shape: {
  customerId: ZodString {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: { checks: [Array], typeName: 'ZodString', coerce: false },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  enquiryDate: ZodOptional {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      innerType: [ZodNullable],
      typeName: 'ZodOptional',
      errorMap: [Function: customMap],
      description: undefined
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  status: ZodOptional {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      innerType: [ZodNullable],
      typeName: 'ZodOptional',
      errorMap: [Function: customMap],
      description: undefined
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  source: ZodEnum {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: { values: [Array], typeName: 'ZodEnum' },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] },
    _cache: Set(4) { 'Email', 'Phone', 'Web Form', 'Walk-in' }
  },
  targetDeliveryDate: ZodOptional {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      innerType: [ZodString],
      typeName: 'ZodOptional',
      errorMap: [Function: customMap],
      description: undefined
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  notes: ZodOptional {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      innerType: [ZodNullable],
      typeName: 'ZodOptional',
      errorMap: [Function: customMap],
      description: undefined
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  attachments: ZodOptional {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      innerType: [ZodNullable],
      typeName: 'ZodOptional',
      errorMap: [Function: customMap],
      description: undefined
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  },
  createdBy: ZodOptional {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      innerType: [ZodNullable],
      typeName: 'ZodOptional',
      errorMap: [Function: customMap],
      description: undefined
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] }
  }
}
8:07:50 AM [express] POST /api/enquiries 201 in 746ms :: {"id":"4355cd49-a047-4657-99c0-d23d259d0bee…
8:07:58 AM [express] GET /api/enquiries/4355cd49-a047-4657-99c0-d23d259d0bee 200 in 248ms :: {"id":"…
8:07:58 AM [express] GET /api/customers/cea748a4-0c52-42e7-9e8a-beea3f861b86 304 in 246ms :: {"id":"…
8:08:13 AM [express] POST /api/enquiry-items 400 in 4ms :: {"message":"Invalid enquiry item data","e…
8:08:59 AM [express] POST /api/enquiry-items 400 in 1ms :: {"message":"Invalid enquiry item data","e…
8:09:00 AM [express] POST /api/enquiry-items 400 in 1ms :: {"message":"Invalid enquiry item data","e…
8:09:00 AM [express] POST /api/enquiry-items 400 in 1ms :: {"message":"Invalid enquiry item data","e…
8:09:08 AM [express] PUT /api/enquiries/4355cd49-a047-4657-99c0-d23d259d0bee 200 in 1490ms :: {"id":…
8:09:10 AM [express] GET /api/enquiries/4355cd49-a047-4657-99c0-d23d259d0bee 200 in 242ms :: {"id":"…
