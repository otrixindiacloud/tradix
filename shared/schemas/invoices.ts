import { pgTable, uuid, varchar, text, decimal, integer, boolean, timestamp, sql, createInsertSchema } from "./common";
import { invoiceStatusEnum } from "./enums";
import { customers, users } from "./users-customers";
import { items } from "./items";

// Invoices - Enhanced with multi-currency and comprehensive tracking
export const invoices = pgTable("invoices", {
  id: uuid("id").primaryKey().default(sql`gen_random_uuid()`),
  invoiceNumber: varchar("invoice_number", { length: 50 }).unique().notNull(),
  invoiceType: varchar("invoice_type", { length: 50 }).default("Final"), // "Proforma", "Final", "Credit Note"
  salesOrderId: uuid("sales_order_id"), // References sales_orders.id
  deliveryId: uuid("delivery_id"), // References deliveries.id
  customerId: uuid("customer_id").references(() => customers.id).notNull(),
  invoiceDate: timestamp("invoice_date").defaultNow(),
  dueDate: timestamp("due_date"),
  status: invoiceStatusEnum("status").default("Draft"),
  // Multi-currency support
  currency: varchar("currency", { length: 10 }).default("USD"),
  exchangeRate: decimal("exchange_rate", { precision: 10, scale: 4 }).default("1.0000"),
  baseCurrency: varchar("base_currency", { length: 10 }).default("USD"),
  // Financial details in invoice currency
  subtotal: decimal("subtotal", { precision: 12, scale: 2 }),
  taxRate: decimal("tax_rate", { precision: 5, scale: 2 }).default("0"),
  taxAmount: decimal("tax_amount", { precision: 12, scale: 2 }),
  discountPercentage: decimal("discount_percentage", { precision: 5, scale: 2 }).default("0"),
  discountAmount: decimal("discount_amount", { precision: 12, scale: 2 }),
  totalAmount: decimal("total_amount", { precision: 12, scale: 2 }),
  paidAmount: decimal("paid_amount", { precision: 12, scale: 2 }).default("0"),
  outstandingAmount: decimal("outstanding_amount", { precision: 12, scale: 2 }),
  // Financial details in base currency
  subtotalBase: decimal("subtotal_base", { precision: 12, scale: 2 }),
  taxAmountBase: decimal("tax_amount_base", { precision: 12, scale: 2 }),
  discountAmountBase: decimal("discount_amount_base", { precision: 12, scale: 2 }),
  totalAmountBase: decimal("total_amount_base", { precision: 12, scale: 2 }),
  // Payment tracking
  paymentTerms: varchar("payment_terms", { length: 100 }),
  paymentMethod: varchar("payment_method", { length: 50 }),
  paymentReference: varchar("payment_reference", { length: 100 }),
  lastPaymentDate: timestamp("last_payment_date"),
  // Auto-generation and linking
  autoGenerated: boolean("auto_generated").default(false),
  generatedFromDeliveryId: uuid("generated_from_delivery_id"), // References deliveries.id
  // Return and credit note support
  originalInvoiceId: uuid("original_invoice_id"), // Self-reference will be added as foreign key constraint
  returnReason: text("return_reason"),
  // Document management
  invoiceDocument: varchar("invoice_document", { length: 500 }),
  invoiceDocumentName: varchar("invoice_document_name", { length: 255 }),
  invoiceDocumentSize: integer("invoice_document_size"),
  notes: text("notes"),
  internalNotes: text("internal_notes"),
  createdBy: uuid("created_by").references(() => users.id),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Invoice Items - Enhanced with barcode support and multi-currency
export const invoiceItems = pgTable("invoice_items", {
  id: uuid("id").primaryKey().default(sql`gen_random_uuid()`),
  invoiceId: uuid("invoice_id").references(() => invoices.id).notNull(),
  deliveryItemId: uuid("delivery_item_id"), // References delivery_items.id
  itemId: uuid("item_id").references(() => items.id).notNull(),
  barcode: varchar("barcode", { length: 100 }).notNull(),
  supplierCode: varchar("supplier_code", { length: 100 }).notNull(),
  description: text("description").notNull(),
  lineNumber: integer("line_number").notNull(),
  quantity: integer("quantity").notNull(),
  // Pricing in invoice currency
  unitPrice: decimal("unit_price", { precision: 10, scale: 2 }).notNull(),
  totalPrice: decimal("total_price", { precision: 12, scale: 2 }).notNull(),
  discountPercentage: decimal("discount_percentage", { precision: 5, scale: 2 }).default("0"),
  discountAmount: decimal("discount_amount", { precision: 10, scale: 2 }).default("0"),
  taxRate: decimal("tax_rate", { precision: 5, scale: 2 }).default("0"),
  taxAmount: decimal("tax_amount", { precision: 10, scale: 2 }).default("0"),
  // Pricing in base currency
  unitPriceBase: decimal("unit_price_base", { precision: 10, scale: 2 }).notNull(),
  totalPriceBase: decimal("total_price_base", { precision: 12, scale: 2 }).notNull(),
  discountAmountBase: decimal("discount_amount_base", { precision: 10, scale: 2 }).default("0"),
  taxAmountBase: decimal("tax_amount_base", { precision: 10, scale: 2 }).default("0"),
  // Return and credit note support
  returnQuantity: integer("return_quantity").default(0),
  returnReason: text("return_reason"),
  notes: text("notes"),
});

// Insert schemas for new delivery and invoicing tables
export const insertInvoiceSchema = createInsertSchema(invoices);

export const insertInvoiceItemSchema = createInsertSchema(invoiceItems).omit({ 
  id: true 
});

// Types
export type Invoice = typeof invoices.$inferSelect;
export type InvoiceItem = typeof invoiceItems.$inferSelect;
export type InsertInvoice = typeof insertInvoiceSchema;
export type InsertInvoiceItem = typeof insertInvoiceItemSchema;
